name: "IdentityServer CI/CD : Production"

on:
  push:
    branches:
      - "prod**"
    paths-ignore:
      - "**.md"
      - "src/DemoApp/**"
  pull_request:
    types:
      - opened
      - ready_for_review
      - synchronize
      - reopened
    branches:
      - "prod**"
    paths-ignore:
      - "**.md"
      - "src/DemoApp/**"
  workflow_dispatch:
    inputs:
      isCD:
        description: "Run CD:"
        required: true
        default: "no"
        type: choice
        options:
          - "no"
          - "publish"
          - "stage"
          - "production"

env:
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 6.0.x
  SOLUTION_FILE: FinalProject.sln

jobs:
  dotnet_CI:
    name: .Net CI
    if: github.event_name != 'pull_request' || (github.event.pull_request.draft == false)
    runs-on: ubuntu-latest
    services:
      postgres1:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      #mssql1:
      #  image: mcr.microsoft.com/mssql/server:2019-latest
      #  env:
      #    SA_PASSWORD: myStrong(!)Password
      #    ACCEPT_EULA: 'Y'
      #  ports:
      #    - 1433:1433
      #  # Set health checks to wait until SqlServer has started
      #  options: >-
      #    --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
      #    --health-interval 60s
      #    --health-timeout 30s
      #    --health-start-period 20s
      #    --health-retries 3

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore
        run: |
          dotnet tool restore
          dotnet restore

      - name: Build Solution
        run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Test
        continue-on-error: true
        run: ./test.ps1
        shell: pwsh

      - name: Upload Test Results Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-latest.TestResults
          path: |
            **/TestResults/**

  code_coverage:
    name: Create Code Coverage Report
    runs-on: ubuntu-latest
    needs: [dotnet_CI]

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Download Test Results Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest.TestResults
          path: .

      - name: Generate ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: "**/TestResults/**/*.cobertura.xml"
          targetdir: "coveragereport"
          reporttypes: "cobertura;HtmlInline_AzurePipelines_Dark"
          assemblyfilters: "+DuongTruong*"
          filefilters: "-**Migrations**.cs;-AutoGeneratedrogram"
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

      - name: Upload Code Coverage Report Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReport
          path: coveragereport/

      - name: Upload TestResults to CodeCov
        uses: codecov/codecov-action@v3
        with:
          files: coveragereport/Cobertura.xml

  dotnet_publish_IdentityServer:
    name: Generate and upload publish artifacts of .NET projects.
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.isCD != 'no')
    runs-on: ubuntu-latest
    needs: dotnet_CI
    env:
      PACKAGE_NAME: IdentityServer
      PROJECT_PATH: src/IdentityServer/src/UI

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore and Build
        run: |
          dotnet tool restore
          dotnet restore "${{ matrix.packages.path }}"
          dotnet build "${{ matrix.packages.path }}" --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Publish
        run: |
          dotnet publish "${{ env.PROJECT_PATH }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.PROJECT_PATH }}/publish"

      - name: Generate migrations efbundle
        continue-on-error: true
        run: |
          mkdir -p "${{ env.PROJECT_PATH }}/efbundle/linux-x64"
          dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --project "${{ env.PROJECT_PATH }}" --context ApplicationDbContext --output "${{ env.PROJECT_PATH }}/efbundle/linux-x64/efbundle-AppDb" -r linux-x64
          dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --project "${{ env.PROJECT_PATH }}" --context ConfigurationDbContext --output "${{ env.PROJECT_PATH }}/efbundle/linux-x64/efbundle-ConfigDb" -r linux-x64
          dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --project "${{ env.PROJECT_PATH }}" --context PersistedGrantDbContext --output "${{ env.PROJECT_PATH }}/efbundle/linux-x64/efbundle-OperaDb" -r linux-x64
          #dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --context ApplicationDbContext --project "${{ env.PROJECT_PATH }}" --output ""${{ env.PROJECT_PATH }}"/publish/efbundle.exe" -r win-x64

      - name: Upload Application Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PROJECT_PATH }}/publish

      - name: Upload Efbundle Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}.efbundle.linux-x64
          path: ${{ env.PROJECT_PATH }}/efbundle/linux-x64

  deploy_identityserver_on_stage:
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.isCD == 'stage')
    runs-on: ubuntu-latest
    needs: dotnet_publish_IdentityServer
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    env:
      AZURE_WEBAPP_NAME: FinalProjectIdentity
      AZURE_WEBAPP_PACKAGE_PATH: src/IdentityServer/src/UI/publish
      AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.PUBLISH_PROFILE_IDENTITYSERVER }}
      AZURE_WEBAPP_PROJECT_PATH: src/IdentityServer/src/UI

    steps:
      - name: Download Publish Artifacts
        uses: actions/download-artifact@v3
        with:
          name: IdentityServer
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Download Efbundle Artifacts
        uses: actions/download-artifact@v3
        with:
          name: IdentityServer.efbundle.linux-x64
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/efbundle/linux-x64

      - name: Deploy to Azure WebApp
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}
