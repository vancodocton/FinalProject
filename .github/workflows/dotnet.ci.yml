name: "Dotnet CI"

on:
  workflow_dispatch:
  workflow_call:

env:
  CONFIGURATION: Release

jobs:
  build_test:
    name: Build and test entire solution
    if: github.event_name != 'pull_request' || (github.event.pull_request.draft == false)
    runs-on: ubuntu-latest
    services:
      postgres1:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5

      - name: Restore
        run: |
          dotnet tool restore
          dotnet restore

      - name: Build Solution
        run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Test
        continue-on-error: true
        run: ./test.ps1
        shell: pwsh

      - name: Upload Test Results Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-latest.TestResults
          path: |
            **/TestResults/**

  code_coverage:
    name: Create Code Coverage Report
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Download Test Results Artifacts
        uses: actions/download-artifact@v5
        with:
          name: ubuntu-latest.TestResults
          path: .

      - name: Generate ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: "**/TestResults/**/*.cobertura.xml"
          targetdir: "coveragereport"
          reporttypes: "cobertura;HtmlInline_AzurePipelines_Dark"
          assemblyfilters: "+DuongTruong*"
          filefilters: "-**Migrations**.cs;-AutoGeneratedrogram"
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

      - name: Upload Code Coverage Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: coveragereport/

      - name: Upload TestResults to CodeCov
        uses: codecov/codecov-action@v5
        with:
          files: coveragereport/Cobertura.xml

  publish_IdentityServer:
    name: Generate and upload publish artifacts of Identity Server
    runs-on: ubuntu-latest
    needs: build_test
    env:
      PACKAGE_NAME: IdentityServer
      PROJECT_PATH: src/IdentityServer/src/UI

    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore and Build
        run: |
          dotnet tool restore
          dotnet restore
          dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Publish
        run: |
          dotnet publish "${{ env.PROJECT_PATH }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.PROJECT_PATH }}/publish"

      - name: Generate migrations efbundle
        continue-on-error: true
        run: |
          mkdir -p "${{ env.PROJECT_PATH }}/efbundle/linux-x64"
          dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --project "${{ env.PROJECT_PATH }}" --context ApplicationDbContext --output "${{ env.PROJECT_PATH }}/efbundle/linux-x64/efbundle-AppDb" -r linux-x64
          dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --project "${{ env.PROJECT_PATH }}" --context ConfigurationDbContext --output "${{ env.PROJECT_PATH }}/efbundle/linux-x64/efbundle-ConfigDb" -r linux-x64
          dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --project "${{ env.PROJECT_PATH }}" --context PersistedGrantDbContext --output "${{ env.PROJECT_PATH }}/efbundle/linux-x64/efbundle-OperaDb" -r linux-x64
          #dotnet ef migrations bundle --configuration ${{ env.CONFIGURATION }} --no-build --context ApplicationDbContext --project "${{ env.PROJECT_PATH }}" --output ""${{ env.PROJECT_PATH }}"/publish/efbundle.exe" -r win-x64

      - name: Upload Application Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PROJECT_PATH }}/publish

      - name: Upload Efbundle Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}.efbundle.linux-x64
          path: ${{ env.PROJECT_PATH }}/efbundle/linux-x64

  publish_DemoApp_Api:
    name: Generate and upload publish artifacts of DemoApp Api
    runs-on: ubuntu-latest
    needs: build_test
    env:
      PACKAGE_NAME: DemoApp.Api
      PROJECT_PATH: src/DemoApp/src/Api
      PROJECT_PUBLISH_PATH: src/DemoApp/src/Api/publish
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore and Build
        run: |
          dotnet tool restore
          dotnet restore "${{ env.PROJECT_PATH }}"
          dotnet build "${{ env.PROJECT_PATH }}" --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Publish
        run: |
          dotnet publish "${{ env.PROJECT_PATH }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.PROJECT_PUBLISH_PATH }}"

      - name: Upload Application Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PROJECT_PUBLISH_PATH }}
